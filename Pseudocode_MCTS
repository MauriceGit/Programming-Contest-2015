

evaluateBoard( board ):
	
	res = 0
	
	--> Penalty für Felder, die nur 1x vorkommen --> unlösbar!
	if singleColorDetected:
		res -= 1000
		
	res += biggestGroupSize(board)
	
	return res
	
simulation(board, maxTests):
	
	if leaf:
		return penalty or 1000
	
	if maxTests == 0:
		return evaluateBoard( board )
	
	allMoves = getAllMoves( board )
	size = allMoves.size()
	int score = 0
	
	for move in allMoves:
		tmpBoard = cloneBoard()
		tmpBoard.applyMove(move)
		
		bonus = simulation( tmpBoard, maxTests/size )
		
		score += getScoreOfMove(move) / size
		score += bonus / size
		
	return score

--> Simulation von Moves, um den besten zu finden.
selectBestMove( board, maxTests ):
	
	allMoves = getAllMoves( board )
	size = allMoves.size()
	bestMove = null
	bestScore = -INFINITY
	
	--> Die Schleife komplett parallelisieren!!!! SUPER!
	for move in allMoves:
		tmpBoard = cloneBoard()
		tmpBoard.applyMove(move)
		
		score = simulation( tmpBoard, maxTests/size ) + getScoreOfMove(move)
		if score > bestScore:
			bestMove = move
			bestScore = score
		
	return bestMove

mcts( board, depth, movesSoFar ):

	bestMove = selectBestMove( board, 1000 )
	
	board.applyMove(bestMove)
	
	--> Sichergehen, dass immer was rausgehauen wird!
	printBestMovesSoFar(movesSoFar ++ bestMove)
	
	mcts( board, depth+1, movesSoFar ++ bestMove)
	

--> Aufruf. Eventuell hier parallelisieren.
mcts(board, 0, []);
	
--> TestFeld:
[[3, 3, 5, 3, 3, 0, 0, 5, 2, 5], [2, 1, 3, 5, 2, 3, 2, 0, 1, 0], [1, 5, 0, 4, 1, 3, 0, 3, 5, 3], [5, 4, 2, 4, 3, 4, 1, 4, 3, 1], [0, 4, 4, 5, 4, 0, 0, 5, 5, 3], [0, 2, 1, 4, 0, 5, 1, 5, 1, 5], [4, 2, 2, 1, 1, 5, 0, 4, 3, 4], [5, 1, 2, 5, 5, 5, 2, 2, 2, 3], [4, 3, 4, 1, 4, 5, 3, 4, 3, 4], [5, 2, 2, 2, 3, 4, 3, 3, 0, 5]]

